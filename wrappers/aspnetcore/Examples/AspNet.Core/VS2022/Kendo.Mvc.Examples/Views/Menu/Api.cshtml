<div class="configurator">
    <div class="header">Configurator</div>
    <div class="box-col">
        <h4>Enable / Disable</h4>
        <ul class="options">
            <li>
                <input type="text" id="toggleIndex"/> <button class="toggleItem">Enable/Disable</button>
            </li>
            <li>
                <button class="toggleTextItems">Enable/Disable all Sub Item 3</button>
            </li>
            <li>
                <button class="toggleStrongItems">Enable/Disable <strong>strong</strong> elements</button>
            </li>
            <li>
                <button class="toggleRedTextItems">Enable/Disable <span class="redText">.redText</span> elements</button>
            </li>
        </ul>
    </div>
    <div class="box-col">
        <h4>Add / Remove</h4>
        <ul class="options">
            <li>
                <input type="text" id="removeIndex"/> <button class="removeItem">Remove</button>
            </li>
            <li>
                <input type="text" value="Item" id="appendText"/> <span class="append-position">under</span> <input type="text" value="0.0" id="appendIndex"/> <button class="appendItem">Append</button>
            </li>
            <li>
                <input type="text" value="Item" id="beforeText"/> <span class="append-position">before</span> <input type="text" value="0" id="beforeIndex"/> <button class="beforeItem">Append</button>
            </li>
            <li>
                <input type="text" value="Item" id="afterText"/> <span class="append-position">after</span> <input type="text" value="0" id="afterIndex"/> <button class="afterItem">Append</button>
            </li>
        </ul>
    </div>
    <div class="box-col">
        <h4>Open / Close</h4>
        <ul class="options">
            <li>
                <input type="text" id="triggerIndex"/> <button class="triggerItem">Open/Close</button>
            </li>
        </ul>
    </div>
</div>

<div class="demo-section wide">
    @(Html.Kendo().Menu()
    .Name("menu")
    .Items(items =>
    {
        items.Add()
            .Text("First Item")
            .Items(children =>
            {
                children.Add().Text("Sub Item 1");
                children.Add().Text("<strong>Sub Item 2</strong>").Encoded(false);
                children.Add().Text("Sub Item 3");
                children.Add().Text("Sub Item 4");
                children.Add().Text("Sub Item 5");
            });

        items.Add()
             .Text("<strong>Second Item</strong>").Encoded(false)
             .Items(children =>
             {
                 children.Add().Text("Sub Item 1");
                 children.Add().Text("Sub Item 2");
                 children.Add().Text("Sub Item 3");
                 children.Add().Text("Sub Item 4");
                 children.Add().Text("Sub Item 5");
             });

        items.Add()
            .Text("<strong>Third Item</strong>").Encoded(false)
            .Items(children =>
            {
                children.Add().Text("Sub Item 1");
                children.Add().Text("Sub Item 2");
                children.Add().Text("Sub Item 3");
                children.Add().Text("Sub Item 4");
                children.Add().Text("Sub Item 5");
            });

        items.Add()
             .Text("Fourth Item")
             .HtmlAttributes(new { @class = "redText" })
             .Items(children =>
             {
                 children.Add().Text("Sub Item 1");
                 children.Add().Text("<strong>Sub Item 2</strong>").Encoded(false);
                 children.Add().Text("Sub Item 3");
                 children.Add().Text("Sub Item 4");
                 children.Add().Text("Sub Item 5");
             });

        items.Add()
            .Text("Fifth Item")
            .Items(children =>
            {
                children.Add().Text("Sub Item 1");
                children.Add().Text("Sub Item 2").HtmlAttributes(new { @class = "redText" });
                children.Add().Text("Sub Item 3");
                children.Add().Text("Sub Item 4");
                children.Add().Text("Sub Item 5");
            });
    })
    )

</div>

@section scripts {
    <script>
        $(document).on("kendoReady", function () {
            var getItem = function (target) {
                var itemIndexes = target.val().split(/[.,]/),
                    item = menu.element;

                if (itemIndexes[0] !== "") {
                    for (var i = 0, len = itemIndexes.length; i < len; i++) {
                        item = item.children("li").eq(itemIndexes[i]);
                        if (i < len - 1) {
                            item = item.find("ul:first");
                        }
                    }
                }

                return item;
            },
                toggle = function (e) {
                    if (e.type != "keypress" || kendo.keys.ENTER == e.keyCode) {
                        var item = getItem($("#toggleIndex"));
                        menu.enable(item, item.hasClass("k-disabled"));
                    }
                },
                trigger = function (e) {
                    if (e.type != "keypress" || kendo.keys.ENTER == e.keyCode) {
                        var item = getItem($("#triggerIndex"));

                        if (item.children().eq(0).hasClass("k-state-active")) {
                            menu.close(item);
                        } else {
                            menu.open(item);
                        }
                    }
                },
                remove = function (e) {
                    if (e.type != "keypress" || kendo.keys.ENTER == e.keyCode)
                        menu.remove(getItem($("#removeIndex")));
                },
                append = function (e) {
                    if (e.type != "keypress" || kendo.keys.ENTER == e.keyCode) {
                        menu.append({
                            text: $("#appendText").val()
                        }, getItem($("#appendIndex")));
                    }
                },
                before = function (e) {
                    if (e.type != "keypress" || kendo.keys.ENTER == e.keyCode) {
                        menu.insertBefore({
                            text: $("#beforeText").val()
                        }, getItem($("#beforeIndex")));
                    }
                },
                after = function (e) {
                    if (e.type != "keypress" || kendo.keys.ENTER == e.keyCode) {
                        menu.insertAfter({
                            text: $("#afterText").val()
                        }, getItem($("#afterIndex")));
                    }
                },
                toggleText = function () {
                    var items = $("#menu").find(".k-link:contains(Sub Item 3)").parent();
                    menu.enable(items, items.hasClass("k-disabled"));
                },

                toggleStrong = function () {
                    var items = $("#menu").find(":has(> strong)").parent();
                    menu.enable(items, items.hasClass("k-disabled"));
                },

                toggleRedText = function () {
                    menu.enable(".redText", $("#menu").find(".redText").hasClass("k-disabled"));
                };

            $(".toggleItem").click(toggle);
            $("#toggleIndex").keypress(toggle);

            $(".triggerItem").click(trigger);
            $("#triggerIndex").keypress(trigger);

            $(".removeItem").click(remove);
            $("#removeIndex").keypress(remove);

            $(".appendItem").click(append);
            $("#appendText,#appendIndex").keypress(append);

            $(".beforeItem").click(before);
            $("#beforeText,#beforeIndex").keypress(before);

            $(".afterItem").click(after);
            $("#afterText,#afterIndex").keypress(after);

            $(".toggleTextItems").click(toggleText);
            $(".toggleStrongItems").click(toggleStrong);
            $(".toggleRedTextItems").click(toggleRedText);

            var menu = $("#menu").data("kendoMenu");
        });
    </script>
}
<style>
    .append-position {
        display: inline-block;
        min-width: 45px;
    }

    .redText,
    .redText > .k-link {
        color: red;
    }

    .redText.k-disabled > .k-link {
        color: lightcoral;
    }
</style>